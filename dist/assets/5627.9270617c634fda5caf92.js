"use strict";(self.webpackChunkopen_metadata=self.webpackChunkopen_metadata||[]).push([[5627],{31487:function(e,t,o){o.d(t,{c:function(){return Q}});var i=o(70655),n=o(96486),a=o(22132),s=o(66827),r=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/athenaConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AthenaConnection","description":"AWS Athena Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.AthenaConnection","definitions":{"athenaType":{"description":"Service type.","type":"string","enum":["Athena"],"default":"Athena"},"athenaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["awsathena+rest"],"default":"awsathena+rest"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/athenaType","default":"Athena"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/athenaScheme","default":"awsathena+rest"},"awsConfig":{"title":"AWS Credentials Configuration","$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"s3StagingDir":{"title":"S3 Staging Directory","description":"S3 Staging Directory. Example: s3://postgres/input/","type":"string","format":"uri"},"workgroup":{"title":"Athena Workgroup","description":"Athena workgroup.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true}},"additionalProperties":false,"required":["s3StagingDir","awsConfig","workgroup"]}'),c=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/azureSQLConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AzureSQLConnection","description":"Azure SQL Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.AzureSQLConnection","definitions":{"azureSQLType":{"description":"Service type.","type":"string","enum":["AzureSQL"],"default":"AzureSQL"},"azureSQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mssql+pyodbc"],"default":"mssql+pyodbc"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/azureSQLType","default":"AzureSQL"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/azureSQLScheme","default":"mssql+pyodbc"},"username":{"title":"Username","description":"Username to connect to AzureSQL. This user should have privileges to read the metadata.","type":"string"},"password":{"title":"Password","description":"Password to connect to AzureSQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the AzureSQL service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"SQLAlchemy driver for AzureSQL.","type":"string","default":"ODBC Driver 18 for SQL Server"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),p=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/bigQueryConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"BigQueryConnection","description":"Google BigQuery Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.BigQueryConnection","definitions":{"bigqueryType":{"description":"Service type.","type":"string","enum":["BigQuery"],"default":"BigQuery"},"bigqueryScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["bigquery"],"default":"bigquery"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/bigqueryType","default":"BigQuery"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/bigqueryScheme","default":"bigquery"},"hostPort":{"title":"Host and Port","description":"BigQuery APIs URL.","type":"string","default":"bigquery.googleapis.com"},"credentials":{"title":"GCS Credentials","description":"GCS Credentials","$id":"https://open-metadata.org/security/credentials/gcsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCSCredentials","definitions":{"singleProjectId":{"title":"Single Project ID","type":"string"},"multipleProjectId":{"title":"Multiple Project ID","type":"array","items":{"title":"Item","type":"string"}},"GCSValues":{"title":"GCS Credentials Values","description":"Pass the raw credential values provided by GCS","type":"object","properties":{"type":{"title":"Credentials Type","description":"Google Cloud service account type.","type":"string"},"projectId":{"title":"Project ID","description":"Project ID","oneOf":[{"$ref":"#/properties/credentials/definitions/singleProjectId"},{"$ref":"#/properties/credentials/definitions/multipleProjectId"}]},"privateKeyId":{"title":"Private Key ID","description":"Google Cloud private key id.","type":"string"},"privateKey":{"title":"Private Key","description":"Google Cloud private key.","type":"string","format":"password"},"clientEmail":{"title":"Client Email","description":"Google Cloud email.","type":"string"},"clientId":{"title":"Client ID","description":"Google Cloud Client ID.","type":"string"},"authUri":{"title":"Authentication URI","description":"Google Cloud auth uri.","type":"string","format":"uri","default":"https://accounts.google.com/o/oauth2/auth"},"tokenUri":{"title":"Token URI","description":"Google Cloud token uri.","type":"string","format":"uri","default":"https://oauth2.googleapis.com/token"},"authProviderX509CertUrl":{"title":"Authentication Provider x509 Certificate URL","description":"Google Cloud auth provider certificate.","type":"string","format":"uri","default":"https://www.googleapis.com/oauth2/v1/certs"},"clientX509CertUrl":{"title":"Client x509 Certificate URL","description":"Google Cloud client certificate uri.","type":"string","format":"uri"}},"additionalProperties":false},"GCSCredentialsPath":{"title":"GCS Credentials Path","description":"Pass the path of file containing the GCS credentials info","type":"string"}},"properties":{"gcsConfig":{"title":"GCS Credentials Configuration","description":"We support two ways of authenticating to GCS i.e via GCS Credentials Values or GCS Credentials Path","oneOf":[{"$ref":"#/properties/credentials/definitions/GCSValues","default":{}},{"$ref":"#/properties/credentials/definitions/GCSCredentialsPath"}]}},"additionalProperties":false,"required":["gcsConfig"]},"tagCategoryName":{"title":"Tag Category Name","description":"Custom MCI-DGP Tag category name for BigQuery policy tags.","type":"string","default":"BigqueryPolicyTags"},"partitionQueryDuration":{"title":"Partition Query Duration","description":"Duration for partitioning BigQuery tables.","type":"integer","default":1},"partitionQuery":{"title":"Partition Query","description":"Partitioning query for BigQuery tables.","type":"string","default":"select * from {}.{} WHERE {} = \\"{}\\" LIMIT 1000"},"partitionField":{"title":"Partition Field","description":"Column name on which the BigQuery table will be partitioned.","type":"string","default":"_PARTITIONTIME"},"taxonomyProjectID":{"title":"Taxonomy Project IDs","description":"Project IDs used to fetch policy tags","type":"array","items":{"type":"string"},"default":null},"taxonomyLocation":{"title":"Taxonomy Location","description":"Taxonomy location used to fetch policy tags","type":"string","default":"us"},"usageLocation":{"title":"Usage Location","description":"Location used to query INFORMATION_SCHEMA.JOBS_BY_PROJECT to fetch usage data. You can pass multi-regions, such as `us` or `eu`, or you specific region. Australia and Asia multi-regions are not yet in GA.","type":"string","default":"us"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from MCI-DGP.","type":"boolean","default":true}},"additionalProperties":false,"required":["credentials"]}'),d=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/clickhouseConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"ClickhouseConnection","description":"Clickhouse Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.ClickhouseConnection","definitions":{"clickhouseType":{"description":"Service type.","type":"string","enum":["Clickhouse"],"default":"Clickhouse"},"clickhouseScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["clickhouse+http","clickhouse+native"],"default":"clickhouse+http"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/clickhouseType","default":"Clickhouse"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/clickhouseScheme","default":"clickhouse+http"},"username":{"title":"Username","description":"Username to connect to Clickhouse. This user should have privileges to read all the metadata in Clickhouse.","type":"string"},"password":{"title":"Password","description":"Password to connect to Clickhouse.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Clickhouse service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"duration":{"title":"Duration","description":"Clickhouse SQL connection duration.","type":"integer"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),l=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/customDatabaseConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"CustomDatabaseConnection","description":"Custom Database Service connection to build a source that is not supported by MCI-DGP yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.database.CustomDatabaseConnection","definitions":{"customDatabaseType":{"title":"Service Type","description":"Custom database service type","type":"string","enum":["CustomDatabase"],"default":"CustomDatabase"}},"properties":{"type":{"title":"Service Type","description":"Custom database service type","$ref":"#/definitions/customDatabaseType","default":"CustomDatabase"},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type","sourcePythonClass"]}'),u=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/databricksConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DatabricksConnection","description":"Databricks Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DatabricksConnection","definitions":{"databricksType":{"description":"Service type.","type":"string","enum":["Databricks"],"default":"Databricks"},"databricksScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["databricks+connector"],"default":"databricks+connector"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/databricksType","default":"Databricks"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/databricksScheme","default":"databricks+connector"},"hostPort":{"title":"Host and Port","description":"Host and port of the Databricks service.","type":"string"},"token":{"title":"Token","description":"Generated Token to connect to Databricks.","type":"string","format":"password"},"httpPath":{"title":"Http Path","description":"Databricks compute resources URL.","type":"string"},"catalog":{"title":"Catalog","description":"Catalog of the data source(Example: hive_metastore). This is optional parameter, if you would like to restrict the metadata reading to a single catalog. When left blank, OpenMetadata Ingestion attempts to scan all the catalog.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","token"]}'),m=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/datalakeConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DatalakeConnection","description":"Datalake Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DatalakeConnection","definitions":{"datalakeType":{"description":"Service type.","type":"string","enum":["Datalake"],"default":"Datalake"},"GCSConfig":{"title":"DataLake GCS Config Source","description":"DataLake GCS storage will ingest metadata of files","properties":{"securityConfig":{"title":"DataLake GCS Security Config","$id":"https://open-metadata.org/security/credentials/gcsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"GCS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCSCredentials","definitions":{"singleProjectId":{"title":"Single Project ID","type":"string"},"multipleProjectId":{"title":"Multiple Project ID","type":"array","items":{"title":"Item","type":"string"}},"GCSValues":{"title":"GCS Credentials Values","description":"Pass the raw credential values provided by GCS","type":"object","properties":{"type":{"title":"Credentials Type","description":"Google Cloud service account type.","type":"string"},"projectId":{"title":"Project ID","description":"Project ID","oneOf":[{"$ref":"#/definitions/GCSConfig/properties/securityConfig/definitions/singleProjectId"},{"$ref":"#/definitions/GCSConfig/properties/securityConfig/definitions/multipleProjectId"}]},"privateKeyId":{"title":"Private Key ID","description":"Google Cloud private key id.","type":"string"},"privateKey":{"title":"Private Key","description":"Google Cloud private key.","type":"string","format":"password"},"clientEmail":{"title":"Client Email","description":"Google Cloud email.","type":"string"},"clientId":{"title":"Client ID","description":"Google Cloud Client ID.","type":"string"},"authUri":{"title":"Authentication URI","description":"Google Cloud auth uri.","type":"string","format":"uri","default":"https://accounts.google.com/o/oauth2/auth"},"tokenUri":{"title":"Token URI","description":"Google Cloud token uri.","type":"string","format":"uri","default":"https://oauth2.googleapis.com/token"},"authProviderX509CertUrl":{"title":"Authentication Provider x509 Certificate URL","description":"Google Cloud auth provider certificate.","type":"string","format":"uri","default":"https://www.googleapis.com/oauth2/v1/certs"},"clientX509CertUrl":{"title":"Client x509 Certificate URL","description":"Google Cloud client certificate uri.","type":"string","format":"uri"}},"additionalProperties":false},"GCSCredentialsPath":{"title":"GCS Credentials Path","description":"Pass the path of file containing the GCS credentials info","type":"string"}},"properties":{"gcsConfig":{"title":"GCS Credentials Configuration","description":"We support two ways of authenticating to GCS i.e via GCS Credentials Values or GCS Credentials Path","oneOf":[{"$ref":"#/definitions/GCSConfig/properties/securityConfig/definitions/GCSValues","default":{}},{"$ref":"#/definitions/GCSConfig/properties/securityConfig/definitions/GCSCredentialsPath"}]}},"additionalProperties":false,"required":["gcsConfig"]}}},"S3Config":{"title":"DataLake S3 Config Source","description":"DataLake S3 bucket will ingest metadata of files in bucket","properties":{"securityConfig":{"title":"DataLake S3 Security Config","$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}}},"AzureConfig":{"title":"Azure Config Source","description":"Azure Datalake Storage will ingest files in container","properties":{"securityConfig":{"title":"Azure Datalake Config Source","$id":"https://open-metadata.org/security/credentials/azureCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"Azure Datalake Credentials","type":"object","javaType":"org.openmetadata.schema.security.credentials.AzureCredentials","properties":{"clientId":{"title":"Client ID","description":"Your Service Principal App ID (Client ID)","type":"string"},"clientSecret":{"title":"Client Secret","description":"Your Service Principal Password (Client Secret)","type":"string","format":"password"},"tenantId":{"title":"Tenant ID","description":"Tenant ID of your Azure Subscription","type":"string"},"accountName":{"title":"Account Name","description":"Account Name of your storage account","type":"string"}},"additionalProperties":false,"required":["clientId","clientSecret","tenantId","accountName"]}}}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/datalakeType","default":"Datalake"},"configSource":{"title":"DataLake Configuration Source","description":"Available sources to fetch files.","oneOf":[{"$ref":"#/definitions/S3Config"},{"$ref":"#/definitions/GCSConfig"},{"$ref":"#/definitions/AzureConfig"}]},"bucketName":{"title":"Bucket Name","description":"Bucket Name of the data source.","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true}},"additionalProperties":false,"required":["configSource"]}'),y=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/db2Connection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"Db2Connection","description":"Db2 Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.Db2Connection","definitions":{"db2Type":{"description":"Service type.","type":"string","enum":["Db2"],"default":"Db2"},"db2Scheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["db2+ibm_db"],"default":"db2+ibm_db"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/db2Type","default":"Db2"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/db2Scheme","default":"db2+ibm_db"},"username":{"title":"Username","description":"Username to connect to DB2. This user should have privileges to read all the metadata in DB2.","type":"string"},"password":{"title":"Password","description":"Password to connect to DB2.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the DB2 service.","type":"string"},"database":{"title":"database","description":"Database of the data source.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username","database"]}'),h=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/deltaLakeConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DeltaLakeConnection","description":"DeltaLake Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DeltaLakeConnection","definitions":{"deltaLakeType":{"description":"Service type.","type":"string","enum":["DeltaLake"],"default":"DeltaLake"},"metastoreHostPortConnection":{"title":"Hive Metastore Service","type":"object","properties":{"metastoreHostPort":{"title":"Hive Metastore Service","description":"Thrift connection to the metastore service. E.g., localhost:9083","type":"string"}},"additionalProperties":false},"metastoreDbConnection":{"title":"Hive Metastore Database","type":"object","properties":{"metastoreDb":{"title":"Hive Metastore Database","description":"JDBC connection to the metastore database. E.g., jdbc:mysql://localhost:3306/demo_hive","type":"string"}},"additionalProperties":false},"metastoreFilePathConnection":{"title":"Hive Metastore File Path","type":"object","properties":{"metastoreFilePath":{"title":"Hive Metastore File Path","description":"Local path for the local file with metastore data. E.g., /tmp/metastore.db","type":"string"}},"additionalProperties":false}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/deltaLakeType","default":"DeltaLake"},"metastoreConnection":{"title":"Hive Metastore Connection","description":"Hive metastore service, local file path or metastore db.","oneOf":[{"$ref":"#/definitions/metastoreHostPortConnection"},{"$ref":"#/definitions/metastoreDbConnection"},{"$ref":"#/definitions/metastoreFilePathConnection"}]},"appName":{"title":"Application Name","description":"pySpark App Name.","type":"string"},"connectionArguments":{"title":"Connection Arguments","description":"Key-Value pairs that will be used to add configs to the SparkSession.","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["metastoreConnection"]}'),g=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/domoDatabaseConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DomoDatabaseConnection","description":"Domo Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DomoDatabaseConnection","definitions":{"domoDatabaseType":{"description":" service type","type":"string","enum":["DomoDatabase"],"default":"DomoDatabase"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/domoDatabaseType","default":"DomoDatabase"},"clientId":{"title":"Client ID","description":"Client ID for DOMO","type":"string"},"secretToken":{"title":"Secret Token","description":"Secret Token to connect DOMO","type":"string","format":"password"},"accessToken":{"title":"Access Token","description":"Access token to connect to DOMO","type":"string"},"apiHost":{"expose":true,"title":"API Host","description":"API Host to connect to DOMO instance","default":"api.domo.com","type":"string","format":"string"},"sandboxDomain":{"title":"Sandbox Domain","description":"Connect to Sandbox Domain","type":"string","format":"uri"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["clientId","secretToken","sandboxDomain"]}'),f=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/druidConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DruidConnection","description":"Druid Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DruidConnection","definitions":{"druidType":{"description":"Service type.","type":"string","enum":["Druid"],"default":"Druid"},"druidScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["druid"],"default":"druid"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/druidType","default":"Druid"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/druidScheme","default":"druid"},"username":{"title":"Username","description":"Username to connect to Druid. This user should have privileges to read all the metadata in Druid.","type":"string"},"password":{"title":"Password","description":"Password to connect to Druid.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Druid service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),S=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/dynamoDBConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"DynamoDBConnection","description":"DynamoDB Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DynamoDBConnection","definitions":{"dynamoDBType":{"description":"Service type.","type":"string","enum":["DynamoDB"],"default":"DynamoDB"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/dynamoDBType","default":"DynamoDB"},"awsConfig":{"title":"AWS Credentials Configuration","$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),b=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/glueConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"GlueConnection","description":"Glue Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.GlueConnection","definitions":{"glueType":{"description":"Service type.","type":"string","enum":["Glue"],"default":"Glue"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/glueType","default":"Glue"},"awsConfig":{"title":"AWS Credentials Configuration","$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"storageServiceName":{"title":"Storage Service Name","description":"AWS storageServiceName Name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig","storageServiceName"]}'),v=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/hiveConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"HiveConnection","description":"Hive SQL Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.HiveConnection","definitions":{"hiveType":{"description":"Service type.","type":"string","enum":["Hive"],"default":"Hive"},"hiveScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["hive","hive+http","hive+https"],"default":"hive"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/hiveType","default":"Hive"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/hiveScheme","default":"hive"},"username":{"title":"Username","description":"Username to connect to Hive. This user should have privileges to read all the metadata in Hive.","type":"string"},"password":{"title":"Password","description":"Password to connect to Hive.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Hive service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"authOptions":{"title":"URL Authentication Options","description":"Authentication options to pass to Hive connector. These options are based on SQLAlchemy.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),C=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/mariaDBConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"MariaDBConnection","description":"MariaDB Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MariaDBConnection","definitions":{"mariaDBType":{"description":"Service type.","type":"string","enum":["MariaDB"],"default":"MariaDB"},"mariaDBScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/mariaDBType","default":"MariaDB"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/mariaDBScheme","default":"mysql+pymysql"},"username":{"title":"Username","description":"Username to connect to MariaDB. This user should have privileges to read all the metadata in MariaDB.","type":"string"},"password":{"title":"Password","description":"Password to connect to MariaDB.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MariaDB service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),T=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/mssqlConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"MssqlConnection","description":"Mssql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MssqlConnection","definitions":{"mssqlType":{"description":"Service type.","type":"string","enum":["Mssql"],"default":"Mssql"},"mssqlScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mssql+pyodbc","mssql+pytds","mssql+pymssql"],"default":"mssql+pytds"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/mssqlType","default":"Mssql"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/mssqlScheme","default":"mssql+pytds"},"username":{"title":"Username","description":"Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.","type":"string"},"password":{"title":"Password","description":"Password to connect to MSSQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MSSQL service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"uriString":{"title":"URI String","description":"Connection URI In case of pyodbc","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),P=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/mysqlConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"MysqlConnection","description":"Mysql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MysqlConnection","definitions":{"mySQLType":{"description":"Service type.","type":"string","enum":["Mysql"],"default":"Mysql"},"mySQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/mySQLType","default":"Mysql"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/mySQLScheme","default":"mysql+pymysql"},"username":{"title":"Username","description":"Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.","type":"string"},"password":{"title":"Password","description":"Password to connect to MySQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MySQL service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),A=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/oracleConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"OracleConnection","description":"Oracle Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.OracleConnection","definitions":{"oracleType":{"description":"Service type.","type":"string","enum":["Oracle"],"default":"Oracle"},"oracleScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["oracle+cx_oracle"],"default":"oracle+cx_oracle"},"OracleDatabaseSchema":{"title":"Database Schema","properties":{"databaseSchema":{"title":"DatabaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"}},"required":["databaseSchema"]},"OracleServiceName":{"title":"Oracle Service Name","properties":{"oracleServiceName":{"title":"Oracle Service Name","description":"The Oracle Service name is the TNS alias that you give when you remotely connect to your database.","type":"string"}},"required":["oracleServiceName"]}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/oracleType","default":"Oracle"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/oracleScheme","default":"oracle+cx_oracle"},"username":{"title":"Username","description":"Username to connect to Oracle. This user should have privileges to read all the metadata in Oracle.","type":"string"},"password":{"title":"Password","description":"Password to connect to Oracle.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Oracle service.","type":"string"},"oracleConnectionType":{"title":"Oracle Connection Type","type":"object","description":"Connect with oracle by either passing service name or database schema name.","oneOf":[{"$ref":"#/definitions/OracleServiceName"},{"$ref":"#/definitions/OracleDatabaseSchema"}]},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username","oracleConnectionType"]}'),j=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/postgresConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"PostgresConnection","description":"Postgres Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PostgresConnection","definitions":{"postgresType":{"description":"Service type.","type":"string","enum":["Postgres"],"default":"Postgres"},"postgresScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["postgresql+psycopg2"],"default":"postgresql+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/postgresType","default":"Postgres"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/postgresScheme","default":"postgresql+psycopg2"},"username":{"title":"Username","description":"Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.","type":"string"},"password":{"title":"Password","description":"Password to connect to Postgres.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Postgres service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),D=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/prestoConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"PrestoConnection","description":"Presto Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PrestoConnection","definitions":{"prestoType":{"description":"Service type.","type":"string","enum":["Presto"],"default":"Presto"},"prestoScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["presto"],"default":"presto"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/prestoType","default":"Presto"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/prestoScheme","default":"presto"},"username":{"title":"Username","description":"Username to connect to Presto. This user should have privileges to read all the metadata in Postgres.","type":"string"},"password":{"title":"Password","description":"Password to connect to Presto.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Presto service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"catalog":{"title":"Catalog","description":"Presto catalog","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),k=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/redshiftConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"RedshiftConnection","description":"Redshift  Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.RedshiftConnection","definitions":{"redshiftType":{"description":"Service type.","type":"string","enum":["Redshift"],"default":"Redshift"},"redshiftScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["redshift+psycopg2"],"default":"redshift+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/redshiftType","default":"Redshift"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/redshiftScheme","default":"redshift+psycopg2"},"username":{"title":"Username","description":"Username to connect to Redshift. This user should have privileges to read all the metadata in Redshift.","type":"string"},"password":{"title":"Password","description":"Password to connect to Redshift.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Redshift service.","type":"string"},"database":{"title":"Database","description":"Initial Redshift database to connect to. If you want to ingest all databases, set ingestAllDatabases to true.","type":"string"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Redshift. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username","database"]}'),M=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/salesforceConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SalesforceConnection","description":"Salesforce Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SalesforceConnection","definitions":{"salesforceType":{"description":"Service type.","type":"string","enum":["Salesforce"],"default":"Salesforce"},"salesforceScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["salesforce"],"default":"salesforce"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/salesforceType","default":"Salesforce"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/salesforceScheme","default":"salesforce"},"username":{"title":"Username","description":"Username to connect to the Salesforce. This user should have privileges to read all the metadata in Redshift.","type":"string"},"password":{"title":"Password","description":"Password to connect to the Salesforce.","type":"string","format":"password"},"securityToken":{"title":"Security Token","description":"Salesforce Security Token.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Salesforce service.","type":"string"},"sobjectName":{"title":"Object Name","description":"Salesforce Object Name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["username"]}'),w=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/sampleDataConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SampleDataConnection","description":"Sample Data Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataConnection","definitions":{"sampleDataType":{"description":"Service type.","type":"string","enum":["SampleData"],"default":"SampleData"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/sampleDataType","default":"SampleData"},"sampleDataFolder":{"description":"Sample Data File Path","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),O=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/singleStoreConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SingleStoreConnection","description":"SingleStore Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SingleStoreConnection","definitions":{"singleStoreType":{"description":"Service type.","type":"string","enum":["SingleStore"],"default":"SingleStore"},"singleStoreScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/singleStoreType","default":"SingleStore"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/singleStoreScheme","default":"mysql+pymysql"},"username":{"title":"Username","description":"Username to connect to SingleStore. This user should have privileges to read all the metadata in MySQL.","type":"string"},"password":{"title":"Password","description":"Password to connect to SingleStore.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the SingleStore service.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),x=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/snowflakeConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SnowflakeConnection","description":"Snowflake Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SnowflakeConnection","definitions":{"snowflakeType":{"description":"Service type.","type":"string","enum":["Snowflake"],"default":"Snowflake"},"snowflakeScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["snowflake"],"default":"snowflake"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/snowflakeType","default":"Snowflake"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/snowflakeScheme","default":"snowflake"},"username":{"title":"Username","description":"Username to connect to Snowflake. This user should have privileges to read all the metadata in Snowflake.","type":"string"},"password":{"title":"Password","description":"Password to connect to Snowflake.","type":"string","format":"password"},"account":{"title":"Account","description":"If the Snowflake URL is https://xyz1234.us-east-1.gcp.snowflakecomputing.com, then the account is xyz1234.us-east-1.gcp","type":"string"},"role":{"title":"Role","description":"Snowflake Role.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"warehouse":{"title":"Warehouse","description":"Snowflake warehouse.","type":"string"},"queryTag":{"title":"Query Tag","description":"Session query tag used to monitor usage on snowflake. To use a query tag snowflake user should have enough privileges to alter the session.","type":"string"},"privateKey":{"title":"Private Key","description":"Connection to Snowflake instance via Private Key","type":"string","format":"password"},"snowflakePrivatekeyPassphrase":{"title":"Snowflake Passphrase Key","description":"Snowflake Passphrase Key used with Private Key","type":"string","format":"password"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["username","account","warehouse"]}'),L=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/sqliteConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SQLiteConnection","description":"SQLite Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SQLiteConnection","definitions":{"SQLiteType":{"description":"Service type.","type":"string","enum":["SQLite"],"default":"SQLite"},"SQLiteScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["sqlite+pysqlite"],"default":"sqlite+pysqlite"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/SQLiteType","default":"SQLite"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/SQLiteScheme","default":"sqlite+pysqlite"},"username":{"title":"Username","description":"Username to connect to SQLite. Blank for in-memory database.","type":"string"},"password":{"title":"Password","description":"Password to connect to SQLite. Blank for in-memory database.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the SQLite service. Blank for in-memory database.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, MCI-DGP Ingestion attempts to scan all the databases.","type":"string"},"databaseMode":{"title":"Database Mode","description":"How to run the SQLite database. :memory: by default.","type":"string","default":":memory:"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from MCI-DGP.","type":"boolean","default":true}},"additionalProperties":false}'),E=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/trinoConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"TrinoConnection","description":"Trino Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.TrinoConnection","definitions":{"trinoType":{"description":"Service type.","type":"string","enum":["Trino"],"default":"Trino"},"trinoScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["trino"],"default":"trino"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/trinoType","default":"Trino"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/trinoScheme","default":"trino"},"username":{"title":"Username","description":"Username to connect to Trino. This user should have privileges to read all the metadata in Trino.","type":"string"},"password":{"title":"Password","description":"Password to connect to Trino.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Trino service.","type":"string"},"catalog":{"title":"Catalog","description":"Catalog of the data source.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"proxies":{"title":"Proxies","description":"Proxies for the connection to Trino data source","type":"object","additionalProperties":{"type":"string"}},"params":{"title":"URL Parameters","description":"URL parameters for connection to the Trino data source","type":"object","additionalProperties":{"type":"string"}},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),$=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/verticaConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"VerticaConnection","description":"Vertica Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.VerticaConnection","definitions":{"verticaType":{"description":"Service type.","type":"string","enum":["Vertica"],"default":"Vertica"},"verticaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["vertica+vertica_python"],"default":"vertica+vertica_python"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/verticaType","default":"Vertica"},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","$ref":"#/definitions/verticaScheme","default":"vertica+vertica_python"},"username":{"title":"Username","description":"Username to connect to Vertica. This user should have privileges to read all the metadata in Vertica.","type":"string"},"password":{"title":"Password","description":"Password to connect to Vertica.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Vertica service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, MCI-DGP Ingestion attempts to scan all the databases.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from MCI-DGP.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","username"]}'),I=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/database/sampleDataConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"ExcelDataConnection","description":"Sample Data Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.ExcelDataConnection","definitions":{"excelDataType":{"description":"Service type.","type":"string","enum":["ExcelData"],"default":"ExcelData"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/excelDataType","default":"ExcelData"},"databaseName":{"title":"databaseName","description":"Enter databaseName","type":"string"},"columnsTopicInTop":{"title":"columnsTopicInTop","description":"Is columnsTopic In Top? ","type":"boolean"},"excelFile":{"title":"Excel File","description":"Excel file Please","type":"string","format":"data-url"},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),Q=function(e){var t={},o=(0,i.pi)({},a.Xy);switch(e){case s.yr.Athena:t=r;break;case s.yr.AzureSQL:t=c;break;case s.yr.BigQuery:t=p;break;case s.yr.Clickhouse:t=d;break;case s.yr.Databricks:t=u;break;case s.yr.Datalake:t=m;break;case s.yr.Db2:t=y;break;case s.yr.DeltaLake:t=h;break;case s.yr.Druid:t=f;break;case s.yr.DynamoDB:t=S;break;case s.yr.Glue:t=b;break;case s.yr.Hive:t=v;break;case s.yr.MariaDB:t=C;break;case s.yr.Mssql:t=T;break;case s.yr.Mysql:t=P;break;case s.yr.Oracle:t=A;break;case s.yr.Postgres:t=j;break;case s.yr.Presto:t=D;break;case s.yr.Redshift:t=k;break;case s.yr.Salesforce:t=M;break;case s.yr.SingleStore:t=O;break;case s.yr.Snowflake:t=x;break;case s.yr.SQLite:t=L;break;case s.yr.Trino:t=E;break;case s.yr.Vertica:t=$;break;case s.yr.CustomDatabase:t=l;break;case s.yr.DomoDatabase:t=g;break;case s.yr.ExcelData:t=I;break;default:t=w}return(0,n.cloneDeep)({schema:t,uiSchema:o})}},11384:function(e,t,o){o.d(t,{J:function(){return d}});var i=o(70655),n=o(96486),a=o(22132),s=o(2798),r=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/metadata/amundsenConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AmundsenConnection","description":"Amundsen Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.AmundsenConnection","definitions":{"amundsenType":{"description":"Amundsen service type","type":"string","enum":["Amundsen"],"default":"Amundsen"}},"properties":{"type":{"description":"Service Type","$ref":"#/definitions/amundsenType","default":"Amundsen"},"username":{"description":"username to connect to the Amundsen Neo4j Connection.","type":"string"},"password":{"description":"password to connect to the Amundsen Neo4j Connection.","type":"string","format":"password"},"hostPort":{"expose":true,"title":"Host and Port","description":"Host and port of the Amundsen Neo4j Connection.","type":"string","format":"uri"},"maxConnectionLifeTime":{"description":"Maximum connection lifetime for the Amundsen Neo4j Connection.","type":"integer","default":50},"validateSSL":{"description":"Enable SSL validation for the Amundsen Neo4j Connection.","type":"boolean","default":false},"encrypted":{"description":"Enable encryption for the Amundsen Neo4j Connection.","type":"boolean","default":false},"supportsMetadataExtraction":{"description":"Supports Metadata Extraction.","type":"boolean","default":true}},"required":["username","password","hostPort"],"additionalProperties":false}'),c=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/metadata/atlasConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AtlasConnection","description":"Atlas Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.AtlasConnection","definitions":{"atlasType":{"description":"Service type.","type":"string","enum":["Atlas"],"default":"Atlas"}},"properties":{"type":{"description":"Service Type","$ref":"#/definitions/atlasType","default":"Atlas"},"username":{"description":"username to connect  to the Atlas. This user should have privileges to read all the metadata in Atlas.","type":"string"},"password":{"description":"password to connect  to the Atlas.","type":"string","format":"password"},"hostPort":{"description":"Host and port of the Atlas service.","title":"Host and Port","type":"string","format":"uri","expose":true},"databaseServiceName":{"description":"service type of the data source.","type":"array","items":{"type":"string"}},"messagingServiceName":{"description":"service type of the messaging source","type":"array","items":{"type":"string"}},"connectionOptions":{"javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),p=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/metadata/openMetadataConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"OpenMetadataConnection","description":"OpenMetadata Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.OpenMetadataConnection","definitions":{"openmetadataType":{"description":"OpenMetadata service type","type":"string","enum":["OpenMetadata"],"default":"OpenMetadata"}},"properties":{"clusterName":{"description":"Cluster name to differentiate OpenMetadata Server instance","type":"string","default":"openmetadata"},"type":{"description":"Service Type","$ref":"#/definitions/openmetadataType","default":"OpenMetadata"},"hostPort":{"description":"OpenMetadata Server Config. Must include API end point ex: http://localhost:8585/api","type":"string","default":"http://localhost:8585/api"},"authProvider":{"description":"OpenMetadata Server Authentication Provider. Make sure configure same auth providers as the one configured on OpenMetadata server.","type":"string","enum":["no-auth","azure","google","okta","auth0","custom-oidc","openmetadata"],"default":"no-auth"},"verifySSL":{"default":"no-ssl","description":"Client SSL verification. Make sure to configure the SSLConfig if enabled.","javaType":"org.openmetadata.schema.security.ssl.VerifySSL","type":"string","enum":["no-ssl","ignore","validate"]},"sslConfig":{"description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$id":"https://open-metadata.org/schema/security/ssl/validateSSLClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"ValidateSSLClientConfig","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"securityConfig":{"mask":true,"description":"OpenMetadata Client security configuration.","oneOf":[{"$id":"https://open-metadata.org/schema/security/client/googleSSOClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"GoogleSSOClientConfig","description":"Google SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.GoogleSSOClientConfig","properties":{"secretKey":{"description":"Google SSO client secret key path or contents.","type":"string","format":"password"},"audience":{"description":"Google SSO audience URL","type":"string","default":"https://www.googleapis.com/oauth2/v4/token"}},"additionalProperties":false,"required":["secretKey"]},{"$id":"https://open-metadata.org/schema/security/client/oktaSSOClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"OktaSSOClientConfig","description":"Okta SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.OktaSSOClientConfig","properties":{"clientId":{"description":"Okta Client ID.","type":"string"},"orgURL":{"description":"Okta org url.","type":"string"},"privateKey":{"description":"Okta Private Key.","type":"string","format":"password"},"email":{"description":"Okta Service account Email.","type":"string"},"scopes":{"type":"array","description":"Okta client scopes.","items":{"type":"string"}}},"additionalProperties":false,"required":["clientId","orgURL","privateKey","email"]},{"$id":"https://open-metadata.org/schema/security/client/auth0SSOClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"Auth0SSOClientConfig","description":"Auth0 SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.Auth0SSOClientConfig","properties":{"clientId":{"description":"Auth0 Client ID.","type":"string"},"secretKey":{"description":"Auth0 Client Secret Key.","type":"string","format":"password"},"domain":{"description":"Auth0 Domain.","type":"string"}},"additionalProperties":false,"required":["clientId","secretKey","domain"]},{"$id":"https://open-metadata.org/schema/security/client/azureSSOClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AzureSSOClientConfig","description":"Azure SSO Client security config to connect to OpenMetadata.","type":"object","javaType":"org.openmetadata.schema.security.client.AzureSSOClientConfig","properties":{"clientSecret":{"description":"Azure SSO client secret key","type":"string","format":"password"},"authority":{"description":"Azure SSO Authority","type":"string"},"clientId":{"description":"Azure Client ID.","type":"string"},"scopes":{"description":"Azure Client ID.","type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["clientSecret","clientId","authority","scopes"]},{"$id":"https://open-metadata.org/schema/security/client/customOidcSSOClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"CustomOIDCSSOClientConfig","description":"Custom OIDC SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.CustomOIDCSSOClientConfig","properties":{"clientId":{"description":"Custom OIDC Client ID.","type":"string"},"secretKey":{"description":"Custom OIDC Client Secret Key.","type":"string","format":"password"},"tokenEndpoint":{"description":"Custom OIDC token endpoint.","type":"string"}},"additionalProperties":false,"required":["clientId","secretKey","tokenEndpoint"]},{"$id":"https://open-metadata.org/schema/security/client/openMetadataJWTClientConfig.json","$schema":"http://json-schema.org/draft-07/schema#","title":"openMetadataJWTClientConfig","description":"openMetadataJWTClientConfig security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.OpenMetadataJWTClientConfig","properties":{"jwtToken":{"description":"OpenMetadata generated JWT token.","type":"string","format":"password"}},"additionalProperties":false,"required":["jwtToken"]}]},"secretsManagerProvider":{"default":"noop","$id":"https://open-metadata.org/schema/security/secrets/secretsManagerProvider.json","$schema":"http://json-schema.org/draft-07/schema#","title":"Secrets Manager Provider","description":"OpenMetadata Secrets Manager Provider. Make sure to configure the same secrets manager providers as the ones configured on the OpenMetadata server.","type":"string","javaType":"org.openmetadata.schema.security.secrets.SecretsManagerProvider","enum":["noop","managed-aws","aws","managed-aws-ssm","aws-ssm","in-memory"],"additionalProperties":false},"secretsManagerCredentials":{"description":"OpenMetadata Secrets Manager Client credentials","oneOf":[{"$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","title":"AWSCredentials","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}]},"apiVersion":{"description":"OpenMetadata server API version to use.","type":"string","default":"v1"},"includeTopics":{"description":"Include Topics for Indexing","type":"boolean","default":true},"includeTables":{"description":"Include Tables for Indexing","type":"boolean","default":true},"includeDashboards":{"description":"Include Dashboards for Indexing","type":"boolean","default":true},"includePipelines":{"description":"Include Pipelines for Indexing","type":"boolean","default":true},"includeMlModels":{"description":"Include MlModels for Indexing","type":"boolean","default":true},"includeUsers":{"description":"Include Users for Indexing","type":"boolean","default":true},"includeTeams":{"description":"Include Teams for Indexing","type":"boolean","default":true},"includeGlossaryTerms":{"description":"Include Glossary Terms for Indexing","type":"boolean","default":true},"includeTags":{"description":"Include Tags for Indexing","type":"boolean","default":true},"includePolicy":{"description":"Include Tags for Policy","type":"boolean","default":true},"includeMessagingServices":{"description":"Include Messaging Services for Indexing","type":"boolean","default":true},"enableVersionValidation":{"description":"Validate Openmetadata Server & Client Version.","type":"boolean","default":true},"includeDatabaseServices":{"description":"Include Database Services for Indexing","type":"boolean","default":true},"includePipelineServices":{"description":"Include Pipeline Services for Indexing","type":"boolean","default":true},"limitRecords":{"description":"Limit the number of records for Indexing.","type":"integer","default":"1000"},"forceEntityOverwriting":{"description":"Force the overwriting of any entity during the ingestion.","type":"boolean","default":false},"elasticsSearch":{"description":"Configuration for Sink Component in the OpenMetadata Ingestion Framework.","type":"object","properties":{"type":{"description":"Type of sink component ex: metadata","type":"string"},"config":{"description":"key/value pairs to pass to workflow component.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type"]},"supportsDataInsightExtraction":{"description":"Support Metadata To Elastic Search","type":"boolean","default":true},"supportsElasticSearchReindexingExtraction":{"description":"Support Elastic Search Reindexing","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),d=function(e){var t={},o=(0,i.pi)({},a.Xy);switch(e){case s.G5.Atlas:t=c;break;case s.G5.Amundsen:t=r;break;case s.G5.OpenMetadata:t=p}return(0,n.cloneDeep)({schema:t,uiSchema:o})}},81706:function(e,t,o){o.d(t,{$:function(){return l}});var i=o(70655),n=o(96486),a=o(22132),s=o(32997),r=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/mlmodel/customMlModelConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"CustomMlModelConnection","description":"Custom MlModel Service connection to build a source that is not supported by MCI-DGP yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.CustomMlModelConnection","definitions":{"customMlModelType":{"title":"Service Type","description":"Custom Ml model service type","type":"string","enum":["CustomMlModel"],"default":"CustomMlModel"}},"properties":{"type":{"title":"Service Type","description":"Custom Ml model service type","$ref":"#/definitions/customMlModelType","default":"CustomMlModel"},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["sourcePythonClass","type"]}'),c=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/mlmodel/mlflowConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"MlflowConnection","description":"MlFlow Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.MlflowConnection","definitions":{"mlflowType":{"description":"Service type.","type":"string","enum":["Mlflow"],"default":"Mlflow"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/mlflowType","default":"Mlflow"},"trackingUri":{"title":"Tracking URI","description":"Mlflow Experiment tracking URI. E.g., http://localhost:5000","type":"string"},"registryUri":{"title":"Registry URI","description":"Mlflow Model registry backend. E.g., mysql+pymysql://mlflow:password@localhost:3307/experiments","type":"string"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["trackingUri","registryUri"]}'),p=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/mlmodel/sageMakerConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SageMakerConnection","description":"SageMaker Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.SageMakerConnection","definitions":{"sageMakerType":{"description":"Service type.","type":"string","enum":["SageMaker"],"default":"SageMaker"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/sageMakerType","default":"SageMaker"},"awsConfig":{"title":"AWS Credentials Configuration","$id":"https://open-metadata.org/security/credentials/awsCredentials.json","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),d=JSON.parse('{"$id":"https://open-metadata.org/schema/entity/services/connections/mlmodel/sklearnConnection.json","$schema":"http://json-schema.org/draft-07/schema#","title":"SklearnConnection","description":"Sklearn Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.SklearnConnection","definitions":{"sklearnType":{"description":"Service type.","type":"string","enum":["Sklearn"],"default":"Sklearn"}},"properties":{"type":{"title":"Service Type","description":"Service Type","$ref":"#/definitions/sklearnType","default":"Sklearn"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),l=function(e){var t={},o=(0,i.pi)({},a.Xy);switch(e){case s.uK.Mlflow:t=c;break;case s.uK.Sklearn:t=d;break;case s.uK.CustomMlModel:t=r;break;case s.uK.SageMaker:t=p}return(0,n.cloneDeep)({schema:t,uiSchema:o})}}}]);