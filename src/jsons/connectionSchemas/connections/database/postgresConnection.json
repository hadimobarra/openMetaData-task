{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/postgresConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PostgresConnection",
  "description": "Postgres Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
  "definitions": {
    "postgresType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Postgres"
      ],
      "default": "Postgres"
    },
    "postgresScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": [
        "postgresql+psycopg2"
      ],
      "default": "postgresql+psycopg2"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/postgresType",
      "default": "Postgres"
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/postgresScheme",
      "default": "postgresql+psycopg2"
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.",
      "type": "string"
    },
    "password": {
      "title": "Password",
      "description": "Password to connect to Postgres.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Postgres service.",
      "type": "string"
    },
    "database": {
      "title": "Database",
      "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
      "type": "string"
    },
    "sslMode": {
      "title": "SSL Mode",
      "description": "SSL Mode to connect to postgres database.",
      "enum": [
        "disable",
        "allow",
        "prefer",
        "require",
        "verify-ca",
        "verify-full"
      ],
      "default": "disable"
    },
    "sslConfig": {
      "description": "Client SSL configuration",
      "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
      "oneOf": [
        {
          "$id": "https://open-metadata.org/schema/security/ssl/validateSSLClientConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "ValidateSSLClientConfig",
          "description": "OpenMetadata Client configured to validate SSL certificates.",
          "type": "object",
          "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
          "properties": {
            "certificatePath": {
              "description": "CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "classificationName": {
      "title": "Classification Name",
      "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
      "type": "string",
      "default": "PostgresPolicyTags"
    },
    "ingestAllDatabases": {
      "title": "Ingest All Databases",
      "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
      "type": "boolean",
      "default": false
    },
    "connectionOptions": {
      "title": "Connection Options",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsUsageExtraction": {
      "description": "Supports Usage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsLineageExtraction": {
      "description": "Supports Lineage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsDBTExtraction": {
      "description": "Supports DBT Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "description": "Supports Profiler",
      "type": "boolean",
      "default": true
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "description": "The source service supports the database concept in its hierarchy",
      "type": "boolean",
      "default": true
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
      "type": "boolean",
      "default": true
    }
  },
  "additionalProperties": false,
  "required": [
    "hostPort",
    "username",
    "database"
  ]
}