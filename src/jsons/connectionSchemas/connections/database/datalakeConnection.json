{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalakeConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DatalakeConnection",
  "description": "Datalake Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.DatalakeConnection",
  "definitions": {
    "datalakeType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Datalake"
      ],
      "default": "Datalake"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/datalakeType",
      "default": "Datalake"
    },
    "configSource": {
      "title": "DataLake Configuration Source",
      "description": "Available sources to fetch files.",
      "oneOf": [
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/azureConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "AzureConfig",
          "description": "Azure Datalake Storage will ingest files in container",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.datalake.AzureConfig",
          "properties": {
            "securityConfig": {
              "title": "Azure Datalake Config Source",
              "$id": "https://open-metadata.org/security/credentials/azureCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "Azure Datalake Credentials",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
              "properties": {
                "clientId": {
                  "title": "Client ID",
                  "description": "Your Service Principal App ID (Client ID)",
                  "type": "string"
                },
                "clientSecret": {
                  "title": "Client Secret",
                  "description": "Your Service Principal Password (Client Secret)",
                  "type": "string",
                  "format": "password"
                },
                "tenantId": {
                  "title": "Tenant ID",
                  "description": "Tenant ID of your Azure Subscription",
                  "type": "string"
                },
                "accountName": {
                  "title": "Account Name",
                  "description": "Account Name of your storage account",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "clientId",
                "clientSecret",
                "tenantId",
                "accountName"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/gcsConfig.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "GCSConfig",
          "description": "DataLake GCS storage will ingest metadata of files",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.datalake.GCSConfig",
          "properties": {
            "securityConfig": {
              "title": "DataLake GCS Security Config",
              "$id": "https://open-metadata.org/security/credentials/gcsCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "GCS credentials configs.",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.GCSCredentials",
              "definitions": {
                "GCSCredentialsPath": {
                  "title": "GCS Credentials Path",
                  "description": "Pass the path of file containing the GCS credentials info",
                  "type": "string"
                }
              },
              "properties": {
                "gcsConfig": {
                  "title": "GCS Credentials Configuration",
                  "description": "We support two ways of authenticating to GCS i.e via GCS Credentials Values or GCS Credentials Path",
                  "oneOf": [
                    {
                      "$id": "https://open-metadata.org/security/credentials/gcsValues.json",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.GCSValues",
                      "title": "GCS Credentials Values",
                      "description": "Pass the raw credential values provided by GCS",
                      "definitions": {
                        "singleProjectId": {
                          "title": "Single Project ID",
                          "type": "string"
                        },
                        "multipleProjectId": {
                          "title": "Multiple Project ID",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Credentials Type",
                          "description": "Google Cloud service account type.",
                          "type": "string"
                        },
                        "projectId": {
                          "title": "Project ID",
                          "description": "Project ID",
                          "oneOf": [
                            {
                              "$ref": "#/properties/configSource/oneOf/1/properties/securityConfig/properties/gcsConfig/oneOf/0/definitions/singleProjectId"
                            },
                            {
                              "$ref": "#/properties/configSource/oneOf/1/properties/securityConfig/properties/gcsConfig/oneOf/0/definitions/multipleProjectId"
                            }
                          ]
                        },
                        "privateKeyId": {
                          "title": "Private Key ID",
                          "description": "Google Cloud private key id.",
                          "type": "string"
                        },
                        "privateKey": {
                          "title": "Private Key",
                          "description": "Google Cloud private key.",
                          "type": "string",
                          "format": "password"
                        },
                        "clientEmail": {
                          "title": "Client Email",
                          "description": "Google Cloud email.",
                          "type": "string"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Google Cloud Client ID.",
                          "type": "string"
                        },
                        "authUri": {
                          "title": "Authentication URI",
                          "description": "Google Cloud auth uri.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://accounts.google.com/o/oauth2/auth"
                        },
                        "tokenUri": {
                          "title": "Token URI",
                          "description": "Google Cloud token uri.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://oauth2.googleapis.com/token"
                        },
                        "authProviderX509CertUrl": {
                          "title": "Authentication Provider x509 Certificate URL",
                          "description": "Google Cloud auth provider certificate.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://www.googleapis.com/oauth2/v1/certs"
                        },
                        "clientX509CertUrl": {
                          "title": "Client x509 Certificate URL",
                          "description": "Google Cloud client certificate uri.",
                          "type": "string",
                          "format": "uri"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$ref": "#/properties/configSource/oneOf/1/properties/securityConfig/definitions/GCSCredentialsPath"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "gcsConfig"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://open-metadata.org/schema/entity/services/connections/database/datalake/s3Config.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "S3Config",
          "description": "DataLake S3 bucket will ingest metadata of files in bucket",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.datalake.S3Config",
          "properties": {
            "securityConfig": {
              "title": "DataLake S3 Security Config",
              "$id": "https://open-metadata.org/security/credentials/awsCredentials.json",
              "$schema": "http://json-schema.org/draft-07/schema#",
              "description": "AWS credentials configs.",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
              "properties": {
                "awsAccessKeyId": {
                  "title": "AWS Access Key ID",
                  "description": "AWS Access key ID.",
                  "type": "string"
                },
                "awsSecretAccessKey": {
                  "title": "AWS Secret Access Key",
                  "description": "AWS Secret Access Key.",
                  "type": "string",
                  "format": "password"
                },
                "awsRegion": {
                  "title": "AWS Region",
                  "description": "AWS Region",
                  "type": "string"
                },
                "awsSessionToken": {
                  "title": "AWS Session Token",
                  "description": "AWS Session Token.",
                  "type": "string"
                },
                "endPointURL": {
                  "title": "Endpoint URL",
                  "description": "EndPoint URL for the AWS",
                  "type": "string",
                  "format": "uri"
                },
                "profileName": {
                  "title": "Profile Name",
                  "description": "The name of a profile to use with the boto session.",
                  "type": "string"
                },
                "assumeRoleArn": {
                  "title": "Role Arn for Assume Role",
                  "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                  "type": "string"
                },
                "assumeRoleSessionName": {
                  "title": "Role Session Name for Assume Role",
                  "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                  "type": "string",
                  "default": "OpenMetadataSession"
                },
                "assumeRoleSourceIdentity": {
                  "title": "Source Identity for Assume Role",
                  "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "awsRegion"
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "bucketName": {
      "title": "Bucket Name",
      "description": "Bucket Name of the data source.",
      "type": "string",
      "default": ""
    },
    "prefix": {
      "title": "Prefix",
      "description": "Prefix of the data source.",
      "type": "string",
      "default": ""
    },
    "databaseName": {
      "title": "Database Name",
      "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
      "type": "string"
    },
    "connectionOptions": {
      "title": "Connection Options",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "description": "Supports Profiler",
      "type": "boolean",
      "default": true
    }
  },
  "additionalProperties": false,
  "required": [
    "configSource"
  ]
}